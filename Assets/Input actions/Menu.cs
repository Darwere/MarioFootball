//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Input actions/Menu.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Menu : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Menu()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Menu"",
    ""maps"": [
        {
            ""name"": ""Control Menu"",
            ""id"": ""bf605607-803b-4c8b-aa7c-08c60bb53e81"",
            ""actions"": [
                {
                    ""name"": ""Next Scene Changement"",
                    ""type"": ""Button"",
                    ""id"": ""3e1c46fb-d79d-44ed-9aab-a738dc5a1b07"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Previous Scene Changement"",
                    ""type"": ""Button"",
                    ""id"": ""713d6901-5c75-4494-8d4e-edcb74f11409"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Selection Item"",
                    ""type"": ""Value"",
                    ""id"": ""ba5382c2-b035-4741-8566-06d03f22e22f"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Selection Item Down"",
                    ""type"": ""Button"",
                    ""id"": ""b1cd76a3-ebd9-4641-a74e-03d053c4a9d5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Selection Item Up"",
                    ""type"": ""Button"",
                    ""id"": ""7fc350d5-b0ea-443f-aeb9-a701349f37e0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Validate"",
                    ""type"": ""Button"",
                    ""id"": ""8a079122-985a-4bd0-955a-c2a1b824cc0f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Selection Item Rigth"",
                    ""type"": ""Button"",
                    ""id"": ""f89c211a-be5b-49f6-8901-3479013a9702"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Selection Item Left"",
                    ""type"": ""Button"",
                    ""id"": ""b7ebf588-f57b-416a-b3eb-dcdb90c7b154"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Pause"",
                    ""type"": ""Button"",
                    ""id"": ""85cb6bf8-5d82-4c91-bad4-2f976c8a1c4c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""eda6a26e-879e-4eb9-973c-a9cf5469541c"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Validate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""58f03cfb-800d-41ca-a553-355ca3614d61"",
                    ""path"": ""<Keyboard>/enter"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Validate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""45816ed2-3caa-404f-b8a9-840fca273e24"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Selection Item Up"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""04f5264a-613c-4637-9888-63aa12e81b32"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": ""Press(behavior=1)"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Selection Item Down"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""a627ef49-f7fa-4ea0-bfae-81e8a13d0b0a"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Selection Item"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""daff76cb-6dd5-4095-839e-7b3822dedd33"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Selection Item"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""b194cba7-56c5-4c90-9c88-de050e1fa437"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Selection Item"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""8520da10-cf73-4b7f-a506-236a2a304d6f"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Selection Item"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""de8472f6-0c97-4fe7-a32a-dc2b208e8675"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Selection Item"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""2eb2b49f-d2bd-407d-abe5-1bbf21c174dc"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Selection Item"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a36bfec2-2cef-42b2-9d41-c2f480887ccb"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Previous Scene Changement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0c25147b-5fcc-4d9a-8db0-1677002ecc23"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Previous Scene Changement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5421dcf2-c43b-43a6-b97e-3003f6fd22d7"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Next Scene Changement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""311717e7-c2a0-49ce-aa0c-02895ba71d5b"",
                    ""path"": ""<Keyboard>/enter"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Next Scene Changement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""83f92374-09cc-496e-9468-c3fa02029b17"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Selection Item Rigth"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ffdffddd-8230-47bd-8d15-9b1a074032ef"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Selection Item Left"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0ee3d5c3-ae00-4809-bfb7-4546b255e36d"",
                    ""path"": ""<Gamepad>/start"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e15c7e26-741f-46a9-bdf1-7a255ed5a2f8"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard&Mouse"",
            ""bindingGroup"": ""Keyboard&Mouse"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Gamepad"",
            ""bindingGroup"": ""Gamepad"",
            ""devices"": [
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Touch"",
            ""bindingGroup"": ""Touch"",
            ""devices"": [
                {
                    ""devicePath"": ""<Touchscreen>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Joystick"",
            ""bindingGroup"": ""Joystick"",
            ""devices"": [
                {
                    ""devicePath"": ""<Joystick>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""XR"",
            ""bindingGroup"": ""XR"",
            ""devices"": [
                {
                    ""devicePath"": ""<XRController>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Control Menu
        m_ControlMenu = asset.FindActionMap("Control Menu", throwIfNotFound: true);
        m_ControlMenu_NextSceneChangement = m_ControlMenu.FindAction("Next Scene Changement", throwIfNotFound: true);
        m_ControlMenu_PreviousSceneChangement = m_ControlMenu.FindAction("Previous Scene Changement", throwIfNotFound: true);
        m_ControlMenu_SelectionItem = m_ControlMenu.FindAction("Selection Item", throwIfNotFound: true);
        m_ControlMenu_SelectionItemDown = m_ControlMenu.FindAction("Selection Item Down", throwIfNotFound: true);
        m_ControlMenu_SelectionItemUp = m_ControlMenu.FindAction("Selection Item Up", throwIfNotFound: true);
        m_ControlMenu_Validate = m_ControlMenu.FindAction("Validate", throwIfNotFound: true);
        m_ControlMenu_SelectionItemRigth = m_ControlMenu.FindAction("Selection Item Rigth", throwIfNotFound: true);
        m_ControlMenu_SelectionItemLeft = m_ControlMenu.FindAction("Selection Item Left", throwIfNotFound: true);
        m_ControlMenu_Pause = m_ControlMenu.FindAction("Pause", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Control Menu
    private readonly InputActionMap m_ControlMenu;
    private IControlMenuActions m_ControlMenuActionsCallbackInterface;
    private readonly InputAction m_ControlMenu_NextSceneChangement;
    private readonly InputAction m_ControlMenu_PreviousSceneChangement;
    private readonly InputAction m_ControlMenu_SelectionItem;
    private readonly InputAction m_ControlMenu_SelectionItemDown;
    private readonly InputAction m_ControlMenu_SelectionItemUp;
    private readonly InputAction m_ControlMenu_Validate;
    private readonly InputAction m_ControlMenu_SelectionItemRigth;
    private readonly InputAction m_ControlMenu_SelectionItemLeft;
    private readonly InputAction m_ControlMenu_Pause;
    public struct ControlMenuActions
    {
        private @Menu m_Wrapper;
        public ControlMenuActions(@Menu wrapper) { m_Wrapper = wrapper; }
        public InputAction @NextSceneChangement => m_Wrapper.m_ControlMenu_NextSceneChangement;
        public InputAction @PreviousSceneChangement => m_Wrapper.m_ControlMenu_PreviousSceneChangement;
        public InputAction @SelectionItem => m_Wrapper.m_ControlMenu_SelectionItem;
        public InputAction @SelectionItemDown => m_Wrapper.m_ControlMenu_SelectionItemDown;
        public InputAction @SelectionItemUp => m_Wrapper.m_ControlMenu_SelectionItemUp;
        public InputAction @Validate => m_Wrapper.m_ControlMenu_Validate;
        public InputAction @SelectionItemRigth => m_Wrapper.m_ControlMenu_SelectionItemRigth;
        public InputAction @SelectionItemLeft => m_Wrapper.m_ControlMenu_SelectionItemLeft;
        public InputAction @Pause => m_Wrapper.m_ControlMenu_Pause;
        public InputActionMap Get() { return m_Wrapper.m_ControlMenu; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ControlMenuActions set) { return set.Get(); }
        public void SetCallbacks(IControlMenuActions instance)
        {
            if (m_Wrapper.m_ControlMenuActionsCallbackInterface != null)
            {
                @NextSceneChangement.started -= m_Wrapper.m_ControlMenuActionsCallbackInterface.OnNextSceneChangement;
                @NextSceneChangement.performed -= m_Wrapper.m_ControlMenuActionsCallbackInterface.OnNextSceneChangement;
                @NextSceneChangement.canceled -= m_Wrapper.m_ControlMenuActionsCallbackInterface.OnNextSceneChangement;
                @PreviousSceneChangement.started -= m_Wrapper.m_ControlMenuActionsCallbackInterface.OnPreviousSceneChangement;
                @PreviousSceneChangement.performed -= m_Wrapper.m_ControlMenuActionsCallbackInterface.OnPreviousSceneChangement;
                @PreviousSceneChangement.canceled -= m_Wrapper.m_ControlMenuActionsCallbackInterface.OnPreviousSceneChangement;
                @SelectionItem.started -= m_Wrapper.m_ControlMenuActionsCallbackInterface.OnSelectionItem;
                @SelectionItem.performed -= m_Wrapper.m_ControlMenuActionsCallbackInterface.OnSelectionItem;
                @SelectionItem.canceled -= m_Wrapper.m_ControlMenuActionsCallbackInterface.OnSelectionItem;
                @SelectionItemDown.started -= m_Wrapper.m_ControlMenuActionsCallbackInterface.OnSelectionItemDown;
                @SelectionItemDown.performed -= m_Wrapper.m_ControlMenuActionsCallbackInterface.OnSelectionItemDown;
                @SelectionItemDown.canceled -= m_Wrapper.m_ControlMenuActionsCallbackInterface.OnSelectionItemDown;
                @SelectionItemUp.started -= m_Wrapper.m_ControlMenuActionsCallbackInterface.OnSelectionItemUp;
                @SelectionItemUp.performed -= m_Wrapper.m_ControlMenuActionsCallbackInterface.OnSelectionItemUp;
                @SelectionItemUp.canceled -= m_Wrapper.m_ControlMenuActionsCallbackInterface.OnSelectionItemUp;
                @Validate.started -= m_Wrapper.m_ControlMenuActionsCallbackInterface.OnValidate;
                @Validate.performed -= m_Wrapper.m_ControlMenuActionsCallbackInterface.OnValidate;
                @Validate.canceled -= m_Wrapper.m_ControlMenuActionsCallbackInterface.OnValidate;
                @SelectionItemRigth.started -= m_Wrapper.m_ControlMenuActionsCallbackInterface.OnSelectionItemRigth;
                @SelectionItemRigth.performed -= m_Wrapper.m_ControlMenuActionsCallbackInterface.OnSelectionItemRigth;
                @SelectionItemRigth.canceled -= m_Wrapper.m_ControlMenuActionsCallbackInterface.OnSelectionItemRigth;
                @SelectionItemLeft.started -= m_Wrapper.m_ControlMenuActionsCallbackInterface.OnSelectionItemLeft;
                @SelectionItemLeft.performed -= m_Wrapper.m_ControlMenuActionsCallbackInterface.OnSelectionItemLeft;
                @SelectionItemLeft.canceled -= m_Wrapper.m_ControlMenuActionsCallbackInterface.OnSelectionItemLeft;
                @Pause.started -= m_Wrapper.m_ControlMenuActionsCallbackInterface.OnPause;
                @Pause.performed -= m_Wrapper.m_ControlMenuActionsCallbackInterface.OnPause;
                @Pause.canceled -= m_Wrapper.m_ControlMenuActionsCallbackInterface.OnPause;
            }
            m_Wrapper.m_ControlMenuActionsCallbackInterface = instance;
            if (instance != null)
            {
                @NextSceneChangement.started += instance.OnNextSceneChangement;
                @NextSceneChangement.performed += instance.OnNextSceneChangement;
                @NextSceneChangement.canceled += instance.OnNextSceneChangement;
                @PreviousSceneChangement.started += instance.OnPreviousSceneChangement;
                @PreviousSceneChangement.performed += instance.OnPreviousSceneChangement;
                @PreviousSceneChangement.canceled += instance.OnPreviousSceneChangement;
                @SelectionItem.started += instance.OnSelectionItem;
                @SelectionItem.performed += instance.OnSelectionItem;
                @SelectionItem.canceled += instance.OnSelectionItem;
                @SelectionItemDown.started += instance.OnSelectionItemDown;
                @SelectionItemDown.performed += instance.OnSelectionItemDown;
                @SelectionItemDown.canceled += instance.OnSelectionItemDown;
                @SelectionItemUp.started += instance.OnSelectionItemUp;
                @SelectionItemUp.performed += instance.OnSelectionItemUp;
                @SelectionItemUp.canceled += instance.OnSelectionItemUp;
                @Validate.started += instance.OnValidate;
                @Validate.performed += instance.OnValidate;
                @Validate.canceled += instance.OnValidate;
                @SelectionItemRigth.started += instance.OnSelectionItemRigth;
                @SelectionItemRigth.performed += instance.OnSelectionItemRigth;
                @SelectionItemRigth.canceled += instance.OnSelectionItemRigth;
                @SelectionItemLeft.started += instance.OnSelectionItemLeft;
                @SelectionItemLeft.performed += instance.OnSelectionItemLeft;
                @SelectionItemLeft.canceled += instance.OnSelectionItemLeft;
                @Pause.started += instance.OnPause;
                @Pause.performed += instance.OnPause;
                @Pause.canceled += instance.OnPause;
            }
        }
    }
    public ControlMenuActions @ControlMenu => new ControlMenuActions(this);
    private int m_KeyboardMouseSchemeIndex = -1;
    public InputControlScheme KeyboardMouseScheme
    {
        get
        {
            if (m_KeyboardMouseSchemeIndex == -1) m_KeyboardMouseSchemeIndex = asset.FindControlSchemeIndex("Keyboard&Mouse");
            return asset.controlSchemes[m_KeyboardMouseSchemeIndex];
        }
    }
    private int m_GamepadSchemeIndex = -1;
    public InputControlScheme GamepadScheme
    {
        get
        {
            if (m_GamepadSchemeIndex == -1) m_GamepadSchemeIndex = asset.FindControlSchemeIndex("Gamepad");
            return asset.controlSchemes[m_GamepadSchemeIndex];
        }
    }
    private int m_TouchSchemeIndex = -1;
    public InputControlScheme TouchScheme
    {
        get
        {
            if (m_TouchSchemeIndex == -1) m_TouchSchemeIndex = asset.FindControlSchemeIndex("Touch");
            return asset.controlSchemes[m_TouchSchemeIndex];
        }
    }
    private int m_JoystickSchemeIndex = -1;
    public InputControlScheme JoystickScheme
    {
        get
        {
            if (m_JoystickSchemeIndex == -1) m_JoystickSchemeIndex = asset.FindControlSchemeIndex("Joystick");
            return asset.controlSchemes[m_JoystickSchemeIndex];
        }
    }
    private int m_XRSchemeIndex = -1;
    public InputControlScheme XRScheme
    {
        get
        {
            if (m_XRSchemeIndex == -1) m_XRSchemeIndex = asset.FindControlSchemeIndex("XR");
            return asset.controlSchemes[m_XRSchemeIndex];
        }
    }
    public interface IControlMenuActions
    {
        void OnNextSceneChangement(InputAction.CallbackContext context);
        void OnPreviousSceneChangement(InputAction.CallbackContext context);
        void OnSelectionItem(InputAction.CallbackContext context);
        void OnSelectionItemDown(InputAction.CallbackContext context);
        void OnSelectionItemUp(InputAction.CallbackContext context);
        void OnValidate(InputAction.CallbackContext context);
        void OnSelectionItemRigth(InputAction.CallbackContext context);
        void OnSelectionItemLeft(InputAction.CallbackContext context);
        void OnPause(InputAction.CallbackContext context);
    }
}

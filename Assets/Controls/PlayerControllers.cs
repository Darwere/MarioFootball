//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Controls/PlayerControllers.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerControllers : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControllers()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControllers"",
    ""maps"": [
        {
            ""name"": ""PlayerController"",
            ""id"": ""c6b46db7-78c3-4242-9773-f434c52a0aaa"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""ec8de6a0-b01a-49f4-8b6d-3a3b1bbc789c"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""SprintActivate"",
                    ""type"": ""Value"",
                    ""id"": ""757f9cd0-0c4f-4e3d-8a6a-688460928afc"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""SprintStop"",
                    ""type"": ""Value"",
                    ""id"": ""3b7a889d-f722-47b3-be6f-121e7d9544d7"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": ""Press(behavior=1)"",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Pass/SwitchPlayer"",
                    ""type"": ""Value"",
                    ""id"": ""40131ae6-2d4f-4b41-817f-b06df8d22bca"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Shoot/Tacle"",
                    ""type"": ""Button"",
                    ""id"": ""8d114f3d-950e-4b60-a113-fad52796d2a5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Dribble/HeadButt"",
                    ""type"": ""Button"",
                    ""id"": ""8f3d9122-e7f7-40d7-893f-4f63c9219a64"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SendObject"",
                    ""type"": ""Button"",
                    ""id"": ""13fc470a-04ea-439a-9746-de22df204468"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2DVectorKeyBoard"",
                    ""id"": ""e7eabb04-ac14-43d9-8091-578279b8cff2"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""d03c9e39-ca9d-4b9d-a5d1-ba5feaad009b"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyBoard"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""8cfe2910-fda7-4acf-b666-c32a0e79fc5e"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyBoard"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""fe97b020-dddc-4bad-a64b-aa6ad736823c"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyBoard"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""381cdcc8-68ff-4481-a732-7817cb179f7c"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyBoard"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""14fafad4-4591-41bb-a6b8-9732ad406a7e"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""GamePad"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""de7aff57-993a-40da-a7b2-1f66a742aeb4"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyBoard"",
                    ""action"": ""Pass/SwitchPlayer"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1eed37e0-1cb5-448c-8fe8-5c526ca5f9f4"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""GamePad"",
                    ""action"": ""Pass/SwitchPlayer"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4f3d0003-b2c2-4614-8ab7-37e54df62589"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Shoot/Tacle"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e53330e7-f54c-46ba-8856-02d225728df1"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Shoot/Tacle"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5b812bcb-614b-4a02-ad6f-fed70d9449be"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyBoard"",
                    ""action"": ""SprintActivate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e764c0bc-a00e-405c-b3ad-58fb37706a12"",
                    ""path"": ""<Gamepad>/leftStickPress"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""GamePad"",
                    ""action"": ""SprintActivate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f89ab11b-87af-4c17-bc2f-7284e007d11f"",
                    ""path"": ""<Keyboard>/z"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Dribble/HeadButt"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ceba1355-f709-4779-a372-f401886d88d2"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Dribble/HeadButt"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7ef4af86-dcfb-43f6-b2a5-113d1e94a616"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SendObject"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7df48abb-d94c-4ed5-a75c-2f9f6d999f9c"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SendObject"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a090aa8f-f482-4582-b471-5f9610a7e629"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyBoard"",
                    ""action"": ""SprintStop"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""776ba31a-dc1f-42f9-82d0-b12799436626"",
                    ""path"": ""<Gamepad>/leftStickPress"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""GamePad"",
                    ""action"": ""SprintStop"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""KeyBoard"",
            ""bindingGroup"": ""KeyBoard"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""GamePad"",
            ""bindingGroup"": ""GamePad"",
            ""devices"": [
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // PlayerController
        m_PlayerController = asset.FindActionMap("PlayerController", throwIfNotFound: true);
        m_PlayerController_Move = m_PlayerController.FindAction("Move", throwIfNotFound: true);
        m_PlayerController_SprintActivate = m_PlayerController.FindAction("SprintActivate", throwIfNotFound: true);
        m_PlayerController_SprintStop = m_PlayerController.FindAction("SprintStop", throwIfNotFound: true);
        m_PlayerController_PassSwitchPlayer = m_PlayerController.FindAction("Pass/SwitchPlayer", throwIfNotFound: true);
        m_PlayerController_ShootTacle = m_PlayerController.FindAction("Shoot/Tacle", throwIfNotFound: true);
        m_PlayerController_DribbleHeadButt = m_PlayerController.FindAction("Dribble/HeadButt", throwIfNotFound: true);
        m_PlayerController_SendObject = m_PlayerController.FindAction("SendObject", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // PlayerController
    private readonly InputActionMap m_PlayerController;
    private IPlayerControllerActions m_PlayerControllerActionsCallbackInterface;
    private readonly InputAction m_PlayerController_Move;
    private readonly InputAction m_PlayerController_SprintActivate;
    private readonly InputAction m_PlayerController_SprintStop;
    private readonly InputAction m_PlayerController_PassSwitchPlayer;
    private readonly InputAction m_PlayerController_ShootTacle;
    private readonly InputAction m_PlayerController_DribbleHeadButt;
    private readonly InputAction m_PlayerController_SendObject;
    public struct PlayerControllerActions
    {
        private @PlayerControllers m_Wrapper;
        public PlayerControllerActions(@PlayerControllers wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_PlayerController_Move;
        public InputAction @SprintActivate => m_Wrapper.m_PlayerController_SprintActivate;
        public InputAction @SprintStop => m_Wrapper.m_PlayerController_SprintStop;
        public InputAction @PassSwitchPlayer => m_Wrapper.m_PlayerController_PassSwitchPlayer;
        public InputAction @ShootTacle => m_Wrapper.m_PlayerController_ShootTacle;
        public InputAction @DribbleHeadButt => m_Wrapper.m_PlayerController_DribbleHeadButt;
        public InputAction @SendObject => m_Wrapper.m_PlayerController_SendObject;
        public InputActionMap Get() { return m_Wrapper.m_PlayerController; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerControllerActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerControllerActions instance)
        {
            if (m_Wrapper.m_PlayerControllerActionsCallbackInterface != null)
            {
                @Move.started -= m_Wrapper.m_PlayerControllerActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_PlayerControllerActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_PlayerControllerActionsCallbackInterface.OnMove;
                @SprintActivate.started -= m_Wrapper.m_PlayerControllerActionsCallbackInterface.OnSprintActivate;
                @SprintActivate.performed -= m_Wrapper.m_PlayerControllerActionsCallbackInterface.OnSprintActivate;
                @SprintActivate.canceled -= m_Wrapper.m_PlayerControllerActionsCallbackInterface.OnSprintActivate;
                @SprintStop.started -= m_Wrapper.m_PlayerControllerActionsCallbackInterface.OnSprintStop;
                @SprintStop.performed -= m_Wrapper.m_PlayerControllerActionsCallbackInterface.OnSprintStop;
                @SprintStop.canceled -= m_Wrapper.m_PlayerControllerActionsCallbackInterface.OnSprintStop;
                @PassSwitchPlayer.started -= m_Wrapper.m_PlayerControllerActionsCallbackInterface.OnPassSwitchPlayer;
                @PassSwitchPlayer.performed -= m_Wrapper.m_PlayerControllerActionsCallbackInterface.OnPassSwitchPlayer;
                @PassSwitchPlayer.canceled -= m_Wrapper.m_PlayerControllerActionsCallbackInterface.OnPassSwitchPlayer;
                @ShootTacle.started -= m_Wrapper.m_PlayerControllerActionsCallbackInterface.OnShootTacle;
                @ShootTacle.performed -= m_Wrapper.m_PlayerControllerActionsCallbackInterface.OnShootTacle;
                @ShootTacle.canceled -= m_Wrapper.m_PlayerControllerActionsCallbackInterface.OnShootTacle;
                @DribbleHeadButt.started -= m_Wrapper.m_PlayerControllerActionsCallbackInterface.OnDribbleHeadButt;
                @DribbleHeadButt.performed -= m_Wrapper.m_PlayerControllerActionsCallbackInterface.OnDribbleHeadButt;
                @DribbleHeadButt.canceled -= m_Wrapper.m_PlayerControllerActionsCallbackInterface.OnDribbleHeadButt;
                @SendObject.started -= m_Wrapper.m_PlayerControllerActionsCallbackInterface.OnSendObject;
                @SendObject.performed -= m_Wrapper.m_PlayerControllerActionsCallbackInterface.OnSendObject;
                @SendObject.canceled -= m_Wrapper.m_PlayerControllerActionsCallbackInterface.OnSendObject;
            }
            m_Wrapper.m_PlayerControllerActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @SprintActivate.started += instance.OnSprintActivate;
                @SprintActivate.performed += instance.OnSprintActivate;
                @SprintActivate.canceled += instance.OnSprintActivate;
                @SprintStop.started += instance.OnSprintStop;
                @SprintStop.performed += instance.OnSprintStop;
                @SprintStop.canceled += instance.OnSprintStop;
                @PassSwitchPlayer.started += instance.OnPassSwitchPlayer;
                @PassSwitchPlayer.performed += instance.OnPassSwitchPlayer;
                @PassSwitchPlayer.canceled += instance.OnPassSwitchPlayer;
                @ShootTacle.started += instance.OnShootTacle;
                @ShootTacle.performed += instance.OnShootTacle;
                @ShootTacle.canceled += instance.OnShootTacle;
                @DribbleHeadButt.started += instance.OnDribbleHeadButt;
                @DribbleHeadButt.performed += instance.OnDribbleHeadButt;
                @DribbleHeadButt.canceled += instance.OnDribbleHeadButt;
                @SendObject.started += instance.OnSendObject;
                @SendObject.performed += instance.OnSendObject;
                @SendObject.canceled += instance.OnSendObject;
            }
        }
    }
    public PlayerControllerActions @PlayerController => new PlayerControllerActions(this);
    private int m_KeyBoardSchemeIndex = -1;
    public InputControlScheme KeyBoardScheme
    {
        get
        {
            if (m_KeyBoardSchemeIndex == -1) m_KeyBoardSchemeIndex = asset.FindControlSchemeIndex("KeyBoard");
            return asset.controlSchemes[m_KeyBoardSchemeIndex];
        }
    }
    private int m_GamePadSchemeIndex = -1;
    public InputControlScheme GamePadScheme
    {
        get
        {
            if (m_GamePadSchemeIndex == -1) m_GamePadSchemeIndex = asset.FindControlSchemeIndex("GamePad");
            return asset.controlSchemes[m_GamePadSchemeIndex];
        }
    }
    public interface IPlayerControllerActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnSprintActivate(InputAction.CallbackContext context);
        void OnSprintStop(InputAction.CallbackContext context);
        void OnPassSwitchPlayer(InputAction.CallbackContext context);
        void OnShootTacle(InputAction.CallbackContext context);
        void OnDribbleHeadButt(InputAction.CallbackContext context);
        void OnSendObject(InputAction.CallbackContext context);
    }
}
